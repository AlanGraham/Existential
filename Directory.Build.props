<Project>
  <PropertyGroup>
    <SharedFiles Condition="Exists('$(SolutionDir).sharedFiles\')">$(SolutionDir).sharedFiles\</SharedFiles>
    <SharedFiles Condition="Exists('..\.sharedFiles\')">..\.sharedFiles\</SharedFiles>
    <LangVersion>latest</LangVersion>
    <TreatWarningsAsErrors>true</TreatWarningsAsErrors>
    <WarningsAsErrors />
    <Deterministic>true</Deterministic>
    <!--<GenerateAssemblyInfo>false</GenerateAssemblyInfo>-->
    <DocumentationFile Condition="!$(MSBuildProjectName.Contains(`QUnit`))">$(MSBuildProjectName).xml</DocumentationFile>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(DocumentationFile);StrykerOutput\**</DefaultItemExcludes>
  </PropertyGroup>

  <PropertyGroup Condition="'$(TF_BUILD)' == 'true'">
    <!-- Mark as a CI build when built in an Azure DevOps pipeline. This allows for a determistic build. -->
    <ContinuousIntegrationBuild>true</ContinuousIntegrationBuild>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Configure Code Analysis -->
    <RunCodeAnalysis>false</RunCodeAnalysis>
    <DefaultRuleSet>GavinGreig.ruleset</DefaultRuleSet>
    <TestRuleSet>GavinGreigTest.ruleset</TestRuleSet>
    <BridgeRuleSet>GavinGreigJS.ruleset</BridgeRuleSet>
    <BridgeTestRuleSet>GavinGreigJSTest.ruleset</BridgeTestRuleSet>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Use naming patterns to identify types of projects that need special-casing. -->
    <IsJSProject>false</IsJSProject>
    <IsDotNetProject>false</IsDotNetProject>
    <IsTestProject>false</IsTestProject>
    <IsBridgeProject>false</IsBridgeProject>
    <IsJSProject Condition="$(MSBuildProjectName.Contains(`.JS`))">true</IsJSProject>
    <IsJSProject Condition="$(MSBuildProjectName.Contains(`QUnit`))">true</IsJSProject>
    <IsDotNetProject Condition="$(MSBuildProjectName.Contains(`.Net`))">true</IsDotNetProject>
    <IsBridgeProject Condition=" '$(IsJSProject)' == 'true' Or '$(IsDotNetProject)' == 'true' ">true</IsBridgeProject>
    <IsTestProject Condition="$(MSBuildProjectName.Contains(`Test`))">true</IsTestProject>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsBridgeProject)' == 'true'">
    <!-- Bridge doesn't adhere to a strict language version, but temporarily enabling this can help find issues faster. -->
    <!--<LangVersion>6</LangVersion>-->
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsTestProject)' != 'true' AND '$(IsJSProject)' != 'true'">
    <!-- Always strong name the assembly, except for test and JS projects. -->
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>$(SharedFiles)ggreig.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsJSProject)' == 'true'">
    <!-- Exclude .Net-specific files and folders. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);bin.net\**;obj.net\**</DefaultItemExcludes>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(DocumentationFile.Replace(`JS`,`Net`))</DefaultItemExcludes>

    <DefineConstants>$(DefineConstants);JavaScript</DefineConstants>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsDotNetProject)' == 'true'">
    <!-- Redirect output folders to avoid clash with JS folders (which can't be redirected). -->
    <BaseIntermediateOutputPath>obj.net</BaseIntermediateOutputPath>
    <BaseOutputPath>bin.net</BaseOutputPath>

    <!-- Exclude JS-specific files and folders. -->
    <DefaultItemExcludes>$(DefaultItemExcludes);bin\**;obj\**;bridge\**;packages.config;bridge.json</DefaultItemExcludes>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(DocumentationFile.Replace(`Net`,`JS`))</DefaultItemExcludes>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsTestProject)' == 'true'">
    <DocumentationFile></DocumentationFile>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsBridgeProject)' != 'true' And '$(IsTestProject)' != 'true' ">
    <CodeAnalysisRuleSet>$(SharedFiles)$(DefaultRuleSet)</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsBridgeProject)' != 'true' And '$(IsTestProject)' == 'true' ">
    <CodeAnalysisRuleSet>$(SharedFiles)$(TestRuleSet)</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsBridgeProject)' == 'true' And '$(IsTestProject)' != 'true' ">
    <CodeAnalysisRuleSet>$(SharedFiles)$(BridgeRuleSet)</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup Condition=" '$(IsBridgeProject)' == 'true' And '$(IsTestProject)' == 'true' ">
    <CodeAnalysisRuleSet>$(SharedFiles)$(BridgeTestRuleSet)</CodeAnalysisRuleSet>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Package / Assembly info configuration - has to come after $(BaseIntermediateOutputPath) is configured. -->
    <TargetFrameworkMonikerAssemblyAttributesPath>$(BaseIntermediateOutputPath)\AssemblyAttributes.cs</TargetFrameworkMonikerAssemblyAttributesPath>
    <TargetFrameworkMonikerAssemblyAttributesFileClean>True</TargetFrameworkMonikerAssemblyAttributesFileClean>
    <Authors>Dr. Gavin T.D. Greig</Authors>
    <Copyright>© Copyright $([System.DateTime]::Now.ToString(`yyyy`)), Dr. Gavin T.D. Greig</Copyright>
    <RepositoryType>Git</RepositoryType>
    <NeutralLanguage>en-GB</NeutralLanguage>
    <PackageIcon>GRune128.png</PackageIcon>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Settings for Source Link. -->

    <!-- Define our VSTS repo's Account and Project -->
    <VstsAccount>ggreig</VstsAccount>

    <!-- Include Source Link. -->
    <SourceLink>$(BaseIntermediateOutputPath)source_link.json</SourceLink>

    <!-- Optional: Publish the repository URL in the built .nupkg (in the NuSpec <Repository> element) -->
    <PublishRepositoryUrl>false</PublishRepositoryUrl>

    <!-- Optional: Embed source files that are not tracked by the source control manager in the PDB -->
    <EmbedUntrackedSources>true</EmbedUntrackedSources>

    <!-- Optional: Build symbol package (.snupkg) to distribute the PDB containing Source Link -->
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <!-- Reference the package for my source control provider. This is a build-time-only dependency. -->
    <PackageReference Include="Microsoft.SourceLink.AzureRepos.Git" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <Compile Include="$(SharedFiles)CompanyInfo.cs" Link="Properties\CompanyInfo.cs" />
  </ItemGroup>

  <ItemGroup>
    <AdditionalFiles Include="$(SharedFiles)stylecop.json" Link="Properties\stylecop.json" />
  </ItemGroup>

  <ItemGroup Condition=" '$(IsJSProject)' != 'true' And '$(IsTestProject)' != 'true' ">
    <None Include="$(SharedFiles)GRune128.png" Link="Properties\GRune128.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup Condition=" '$(IsBridgeProject)' != 'true' And '$(IsTestProject)' != 'true' ">
    <AdditionalFiles Include="$(SharedFiles)$(DefaultRuleSet)" Link="Properties\$(DefaultRuleSet)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(IsBridgeProject)' != 'true' And '$(IsTestProject)' == 'true' ">
    <AdditionalFiles Include="$(SharedFiles)$(TestRuleSet)" Link="Properties\$(TestRuleSet)" />
  </ItemGroup>
  <ItemGroup Condition=" '$(IsBridgeProject)' == 'true' And '$(IsTestProject)' != 'true' ">
    <AdditionalFiles Include="$(SharedFiles)$(BridgeRuleSet)" Link="Properties\$(BridgeRuleSet)" />
  </ItemGroup>

  <ItemGroup Condition=" '$(IsBridgeProject)' == 'true' And '$(IsTestProject)' == 'true' ">
    <AdditionalFiles Include="$(SharedFiles)$(BridgeTestRuleSet)" Link="Properties\$(BridgeTestRuleSet)" />
  </ItemGroup>
</Project>